import com.rameses.annotations.*; 

class PanaboBusinessPermitInterceptor {
	
	@ActiveDB('panabo_business_permit') 
	def em; 

	@Service("BusinessCashReceiptService")
	def cashReceiptSvc;

	@Service('BusinessBillingService') 
	def billingSvc;	

	@After( pattern="BusinessPermitService.getReport" ) 
	public void afterPermitReport( evt ) {
		def result = evt.result; 

		def params = [ applicationid: result.applicationid ]; 		
		if ( result.lobs ) {
			def appinfos = em.getApplicationInfos( params ); 
			def taxfees = em.getApplicationTaxFees( params ); 
			result.lobs.each{ o-> 
				def x = appinfos.find{ it.lobid==o.lobid }
				o.grossnonessential = x?.grossnonessential; 
				o.grossessential = x?.grossessential; 
				o.capital = x?.capital;
				o.gross = x?.gross;	

				x = taxfees.find{ it.lobid==o.lobid }
				o.tax = x?.tax; 
				o.mp = x?.mp; 
			} 
		} 

		def o = em.findGrossCapital( params ); 
		if ( o ) {
			result.gross = o.gross; 
			result.capital = o.capital;
			result.declaredgross = o.declaredgross;
			result.declaredcapital = o.declaredcapital;  
		} 

		result.receiptnos = result.payments.collect{ it.refno }.unique().findAll{( it )}.join('/');
		result.receiptdates = result.payments.collect{ it.refdate }.unique().findAll{( it )}.join('/');
		result.receiptamount = result.payments.collect{ it.amount }.sum{(it? it: 0.0)} 
		result.remarks = 'FULLY PAID';

		params._silent = true; 
		params._with_items = false; 
		params._with_taxfees = false; 
		
		def appid = result.parentapplicationid; 
		if ( !appid ) appid = result.applicationid; 

		def bill = billingSvc.getBilling([ applicationid: result.applicationid, silent: true ]); 
		if ( bill?.totals ) { 
			def qtrs = []; 
			qtrs << [ qtr:1, amount: (bill.totals.q1 ? bill.totals.q1 : 0.0) ];
			qtrs << [ qtr:2, amount: (bill.totals.q2 ? bill.totals.q2 : 0.0) ];
			qtrs << [ qtr:3, amount: (bill.totals.q3 ? bill.totals.q3 : 0.0) ];
			qtrs << [ qtr:4, amount: (bill.totals.q4 ? bill.totals.q4 : 0.0) ];

			def maxqtr = qtrs.findAll{( it.amount <= 0 )}.max{ it.qtr } 
			result.lastpaidqtr = ( maxqtr ? maxqtr.qtr : null ); 
		} 
		
		def billing = cashReceiptSvc.getBillingForPayment( params );  
		if ( billing?.totals ) { 
			def qtrs = [
				[qtr: 1, amount: billing.totals.q1],
				[qtr: 2, amount: billing.totals.q2],
				[qtr: 3, amount: billing.totals.q3],
				[qtr: 4, amount: billing.totals.q4] 
			];

			def mx = qtrs.findAll{ it.amount==0.0 }.max{ it.qtr }
			def qtr = (mx?.qtr ? mx.qtr : 0); 
			if ( qtr == 0 ) { 
				result.remarks = 'FULLY PAID'; 
			} else if ( qtr > 0 ) { 
				result.remarks = 'PAID UP TO Q'+qtr; 
			} else { 
				result.remarks = 'NOT PAID (Q1 - Q'+ qtr +')';  
			} 
		} 
	} 
}