import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*


public class PanaboRPTLedgerInterceptor 
{
    @ActiveDB('rptledger')
    def ledgerEm;

    @ActiveDB('panabo_ledger')
    def panaboLedgerEm;

    @DataContext('faas')
    def db_faas

    @ActiveDB(value="ecpac_rptnew", em="ecpac")
    def em;

    @Service('RPTUtil')
    def util

    
     @After(pattern="RPTLedgerService.postNewLedger") 
    public void postEcpacData( evt ) {
        // def ledger = evt.result 
        // def faas = db_faas.select('objid,datacapture').find([objid:ledger.faasid]).first()
        // if (faas && util.isTrue(faas.datacapture)){
        //     def prop = em.findProperty([idmaster:ledger.faasid])
        //     if (!prop) return;

        //     try{
        //         prop.rptledgerid = ledger.objid 
        //         prop.tdno = ledger.tdno
        //         postFaasHistories(ledger, prop)
        //         postCredits(ledger, prop)
        //     }
        //     catch(e){
        //         println 'postEcpacCredits [ERROR] ========================'
        //         e.printStackTrace();
        //     }
        // }
    }

    void postFaasHistories(ledger, prop){
        def histories = em.getFaasHistories(prop)
        if (histories && histories.size() > 1){
            for(int i = 0; i < histories.size() - 1; i++){
                def idx = i;
                def prev = histories[idx]
                def curr = histories[++idx]
                curr.toyear = prev.fromyear - 1
                curr.toqtr = 4
            }

            histories.each{
                if (it.tdno != ledger.tdno){
                    it.rptledgerid = ledger.objid
                    it.txntype = ledger.txntype
                    it.classification = ledger.classification
                    it.taxable = ledger.taxable 
                    ledgerEm.create(it, 'ledgerfaas')
                }
            }

            ledger.lastyearpaid = histories.last().fromyear - 1
            ledger.lastqtrpaid = 4
            ledgerEm.update(ledger)
        }
    }

    void postCredits(ledger, prop){
        def credits = em.getCredits(prop)
        if (credits) {
            credits.each{
                it.objid = 'C' + new java.rmi.server.UID()
                it.rptledgerid = ledger.objid 
                ledgerEm.create(it, 'credit')
            }
            ledger.lastyearpaid = credits[0].toyear 
            ledger.lastqtrpaid = credits[0].toqtr
            ledger.state = 'APPROVED'
            ledgerEm.update(ledger)
            panaboLedgerEm.approveLedgerFaasByLedgerId(ledger)
        }
    }

}