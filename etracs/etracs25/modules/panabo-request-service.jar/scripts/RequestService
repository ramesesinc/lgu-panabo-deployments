import com.rameses.common.*
import com.rameses.annotations.*
import com.rameses.services.extended.*

class RequestService
{
	@DataContext(value="request", adapter="request")
	def em

	@ProxyMethod
	public def getList(params){
		//allow lastname search only using searchtext
		if (params.searchtext==null)
		params.searchtext=''
		params.searchtext += '%'
		return em.where('subject LIKE :searchtext OR description LIKE :searchtext OR actionTaken LIKE :searchtext OR status LIKE :searchtext', params)
			.orderBy('subject,description,actionTaken,status')
			.list()

	}

	@ProxyMethod
	public def getTypes(params){
		//allow name search only using searchtext
		if (params.searchtext==null)
		params.searchtext=''
		params.searchtext += '%'
		return em.where('name LIKE :searchtext OR description LIKE :searchtext', params)
			.orderBy('name,description')
			.list()

	}

	@ProxyMethod
	public def getOffice(params){
		//allow name search only using searchtext
		if (params.searchtext==null)
		params.searchtext=''
		params.searchtext += '%'
		return em.where('officeName LIKE :searchtext OR head LIKE :searchtext OR officeDef LIKE :searchtext', params)
			.orderBy('officeName,head,officeDef')
			.list()

	}

	@ProxyMethod
	public def create(entity){
		entity.createdBy_objid = [objid:env.USERID]
		entity.createdBy_name = [name:env.FULLNAME]
		entity.dtcreated = dtSvc.serverDate
		return em.create(entity)
	}

	@ProxyMethod
	public def update(entity){
		return em.update(entity)
	}

	@ProxyMethod
	public void delete(entity){
		em.delete(entity)
	}

	@ProxyMethod
	public def open(entity){
		return em.read(entity)
	}
}